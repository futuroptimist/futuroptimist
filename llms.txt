# llms.txt

> Futuroptimist is a solarpunk-flavoured YouTube/GitHub project combining maker builds with forward‑looking tech essays. This file follows the [llms.txt](https://llmstxt.org/) specification and mirrors key details from [`AGENTS.md`](AGENTS.md).

Every commit is public training data—write informative commit messages.

## Docs
- [README](README.md)
- [AGENTS guide](AGENTS.md)
- [INSTRUCTIONS](INSTRUCTIONS.md)
- [RUNBOOK](RUNBOOK.md)
- [Contributing guide](CONTRIBUTING.md)
- [Codex prompts](docs/prompts/codex/automation.md)
- [Prompt docs summary](docs/prompt-docs-summary.md)
- `scripts/checks.sh` runs `npm run docs-lint` to enforce Markdown hygiene (see tests/test_checks_script.py).
## Coding Conventions
- Python 3.11+, formatted with `black` and `ruff` (`ruff check --fix .` or `make fmt`). A `.pre-commit-config.yaml` enforces formatting.
- Use `pathlib` for cross-platform paths; keep dependencies minimal.

Script format:
- `srt_to_markdown.py` converts `.srt` captions into Futuroptimist script format, handling
  italics and bold tags (`<i>/<em>` and `<b>/<strong>`, even with attributes), line breaks,
  emoji, case-insensitive HTML tags, removing speaker prefixes, stripping other tags,
  collapsing extra whitespace, and skipping non-dialog lines like `[Music]`. Tests such as
  `tests/test_srt_to_markdown.py::test_to_markdown_splits_sentences` and
  `::test_to_markdown_handles_abbreviations` ensure multi-sentence captions expand into one
  `[NARRATOR]` line per thought without breaking common abbreviations.
- `generate_scripts_from_subtitles.py` scans `video_scripts/*/metadata.json`, resolves each
  transcript in `subtitles/`, and produces `script.md` files via the converter above. The
  workflow is covered by `tests/test_generate_scripts_from_subtitles.py` to keep narration
  comments and `[NARRATOR]` lines consistent.
- `index_script_segments.py` exports every `[NARRATOR]` line (plus timestamps) into
  `data/script_segments.json` for lightweight RAG indexing. Regression coverage lives in
  `tests/test_index_script_segments.py`.
- `newsletter_builder.py` assembles Markdown digests of recent videos filtered by status,
  publish date and optional limits so updates slot straight into newsletters. See
  `tests/test_newsletter_builder.py`.
- `[NARRATOR]:` spoken lines.
- `[VISUAL]:` cues right after the dialogue they support.
- Leave a blank line between narration and visuals.
- Each script folder includes a `metadata.json` validated against `schemas/video_metadata.schema.json`.
- Each script folder may also contain a `sources.txt` file with one URL per line. Downloaded articles or clips are for citation/reference only—check usage rights and cite in **APA style** rather than redistributing.
- Each script folder may also have a `footage.md` file listing required shots (archive vs new, CGI or generative). Mark generative items to avoid obvious "AI slop".
- Run `python src/index_local_media.py` to rebuild `footage_index.json`, which lists
  file paths, UTC modification times, file sizes, **and a `kind`
  classification (`image`, `video`, `audio`, or `other`)** for assets stored
  in the local `footage/` directory. Use `--exclude PATH` (repeatable) to skip
  files or folders. Running the helper from inside `footage/` now works without
  extra arguments; it auto-detects the repo root so the default output lands beside
  your media (see `tests/test_index_local_media.py::test_main_defaults_inside_footage_dir`).
- Run `python src/report_funnel.py --slug <slug>` (optionally add
  `--selects-file selects.txt`) to print funnel stats. The CLI surfaces totals
  and coverage percentages for converted and selected assets, plus a kind
  breakdown, and writes a manifest recording `converted_coverage` and
  `selected_coverage` ratios (see
  `tests/test_report_funnel.py::test_main_reports_stats`).
- Run `python src/enrich_metadata.py` to sync `metadata.json` title,
  publish date, duration, the highest-resolution thumbnail URL, and current
  view count from the YouTube Data v3 API whenever `YOUTUBE_API_KEY` is
  exported. Add `--dry-run` to preview changes; see
  `tests/test_enrich_metadata.py` for coverage of thumbnail picking and view
  count syncing.
- Run `python src/update_video_metadata.py` to refresh titles, publish dates,
  durations, keyword tags, descriptions, the highest-resolution
  thumbnail URL, and current view counts via the YouTube Data v3 API.
  Coverage lives in `tests/test_update_video_metadata.py::test_updates_metadata_from_api`.
- Run `python src/analytics_ingester.py --start-date YYYY-MM-DD --end-date YYYY-MM-DD`
  to fetch watch time minutes, average view duration, impressions, and
  click-through rate from the YouTube Analytics API. Set
  `YOUTUBE_ANALYTICS_TOKEN` to an OAuth bearer token. The helper updates
  each `metadata.json` with an `analytics` block and writes
  `analytics/report.json`; see `tests/test_analytics_ingester.py` for
  coverage.

Run tests with:
```bash
make setup   # venv + deps (or ./setup.ps1)
make test    # runs `pytest -q`
```
- For coverage:
```bash
pytest --cov=./scripts --cov=./tests
```
- [source_urls.txt](source_urls.txt) consumed by `collect_sources.py` to populate `/sources/sources.json`
The Makefile picks the correct Python path for Windows or Unix automatically.
If that fails, run `python3 -m venv .venv && uv pip install -r requirements.txt` then `pytest -q`.
If `make test` complains about `.venv/Scripts/python`, run `PATH=.venv/bin:$PATH pytest -q`.
If `yt-dlp` isn't found during tests, prefix the command with `PATH=.venv/bin:$PATH`.

- Key directories:
- `/src/` CLI utilities
- `/video_scripts/` per-video folders (`YYYYMMDD_slug/`)
- `/ideas/` checklist-style idea files
- `/schemas/` JSON schemas
- `/tests/` pytest suites
- `/subtitles/` caption files from `fetch_subtitles.py`
- `/sources/` reference files downloaded by `collect_sources.py` (see `tests/test_collect_sources.py::test_process_global_sources`)
- `video_ids.txt` canonical YouTube ID list (`#` lines are comments)

## Data & Schemas
- [Video metadata schema](schemas/video_metadata.schema.json)

## Optional
- [Ideas directory](ideas/README.md): format for idea files
- Example idea – solar aquaponics checklist: [solar_aquaponics.md](ideas/solar_aquaponics.md)
- For cross-repo quests, see [axel](https://github.com/futuroptimist/axel),
  [gitshelves](https://github.com/futuroptimist/gitshelves), [wove](https://github.com/futuroptimist/wove) and [sugarkube](https://github.com/futuroptimist/sugarkube)

---
LLM usage policy: No private data; operate within repo; see LICENSE (MIT).
